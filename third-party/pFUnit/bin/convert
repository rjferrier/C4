#!/bin/bash

# assume that pfunit directory has been specified in variable $PFUNIT

# determine external names from user code
export SUITENAME=`awk 'match(tolower($0),/^ *module /)>0 {print '' $2 ''}' $1`
export WRAPNAME=`awk 'match(tolower($0),/^ *module /)>0 {print $2"_wrap"}' $1`
export MODNAME=`awk 'match(tolower($0),/^ *module /)>0 {print $2}' $1`

# extract user defined tests into an external file for further
# manipulation
echo "CONVERTING FILE:" `basename $1` `basename $2`
# need a unique file name to prevent clashes in parallelization
export METHODS_FILE=method_list.$RANDOM
awk '/^ *subroutine test/ {sub(/\(.*\)/,")"); sub(/subroutine / ,"OPER("); print} ' $1 > $METHODS_FILE

export HAS_SETUP=`awk 'match(tolower($0),/^ *subroutine setup/) > 0 {print "-DHAS_SETUP"}'  $1`
export USES_MPI=`awk 'match(tolower($0),/\*\*\* mpi test cases \*\*\*/) > 0 {print "-DUSES_MPI"}'  $1`

if [ -n "$USES_MPI" ]; then SKELETON=skeleton_MPI.F90; else SKELETON=skeleton.F90; fi

# use sed to enable multiline cpp macros in fortran source

if [ "`uname`" == "OSF1" ]; then
    CPP=cpp; CPP_EXTRA_FLAGS=-DNO_CONCATENATION_OPERATOR;
else
    CPP_EXTRA_FLAGS=-DHAS_CONCATENATION_OPERATOR; 
    if [ "`uname`" == "Darwin" ]; then
	CPP=cpp-4.0; 
    else
	CPP=cpp;
    fi
fi

echo $CPP -P $HAS_SETUP $CPP_EXTRA_FLAGS -DSUITE_NAME=$SUITENAME -DSUITE_NAME_STRING=\"$SUITENAME\" -DNAME_USER_MODULE=$MODNAME \
           -DMETHODS_FILE='"'$METHODS_FILE'"' -DNAME_WRAP_MODULE=$WRAPNAME -I$PFUNIT/include -I. $PFUNIT/include/$SKELETON | \
    sed -e 's/\\/\
/g'  > $2

$CPP -P $HAS_SETUP $CPP_EXTRA_FLAGS -DSUITE_NAME=$SUITENAME -DSUITE_NAME_STRING=\"$SUITENAME\" -DNAME_USER_MODULE=$MODNAME \
           -DMETHODS_FILE='"'$METHODS_FILE'"' -DNAME_WRAP_MODULE=$WRAPNAME -I$PFUNIT/include -I. $PFUNIT/include/$SKELETON | \
    sed -e 's/\\/\
/g'  > $2


rm $METHODS_FILE

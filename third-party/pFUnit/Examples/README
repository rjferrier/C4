There are many several supported mechanisms for constructing suites of
tests within pFUnit.  These are suggestively labeled "manual",
"template", and "dso".

The most straightforward mechanism is for the user to manually
assemble the suite with explicit instrutions in their own driver.
This mode is also essential for the bootstrapping development of
pFUnit itself.  The downside of this approach is both the tedious
requirement of editing the driver as each new test is created, or
worse, forgetting to do so and incorrectly believing that a test is
being exercised when in fact it is not.  New users are recommended to
understand the manual mechanism before proceeding to either of the
other mechanisms for routine use.

The "template" mechanism for assembling tests is probably the one
which will be the most comfortable for most users.  This mechanism
uses simple shell scripts and pFUnit templates to automatically
assemble pFUnit test cases and suites based upon the content of the
user's test source code.  These scripts are currently rather
primitive, but fully functional so long as users follow some simple
conventions.  The most difficult aspect of this approach is the
additional complexity in the build (Makefile) introduced by the
intermediate wrapper files.   

The "dso" mechanism for assembling tests uses so-called dynamic
shared-object libraries as containers for the users tests.  Such
libraries can be searched and loaded dynamically at runtime.  To use
this mechanism, the user merely installs their test routines in a DSO
and uses a prebuilt pFUnit executable (pfunit.x).  This executable
prompts for the location of the DSO, searches the DSO for routines
matching the pattern "test_*", builds a suite from these, and runs the
suite.  Although this is a very elegant and flexible mechanism, some
users may have difficulty providing their tests as a DSO.  (How to do
this varies significantly from system to system, and may not be
possible unless other libraries are also provided as DSOs.)

The "dso" mechanism is also not yet completed.  It currently works
well with simple tests cases - i.e. those that do not use fixtures,
MPI, or parameterized setups.  We expect to modify pFUnit interfaces
slightly in the near future to accommodate additional information that
needs to be exchanged between the framework and user code.  



